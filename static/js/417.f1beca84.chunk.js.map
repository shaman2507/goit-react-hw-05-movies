{"version":3,"file":"static/js/417.f1beca84.chunk.js","mappings":"qNAEO,MAAMA,EAAWC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+NAcpBC,EAAWH,EAAAA,GAAAA,EAAQI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,wIASJF,EAAAA,GAAAA,IAAUK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,wL,aCpBtC,MAoEA,EApEaI,KACX,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,OACbC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GAiB3C,OAfAG,EAAAA,EAAAA,YAAU,KACcC,WACpB,IACEF,GAAa,GACb,MAAMG,QAAYC,EAAAA,GAAiBV,GACnCG,EAAQM,EAAIP,KAKd,CAJE,MAAOS,GACPC,QAAQC,IAAIF,EACd,CAAC,QACCL,GAAa,EACf,GAEFQ,EAAe,GACd,CAACd,KAGFe,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGZ,GACCU,EAAAA,EAAAA,KAAA,KAAAE,SAAG,iBAEHF,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGf,EAAKgB,QACJH,EAAAA,EAAAA,KAACvB,EAAQ,CAAAyB,SACNf,EAAKiB,KAAIC,IACRC,EAAAA,EAAAA,MAAA,MAAAJ,SAAA,CACGG,EAAME,cACLP,EAAAA,EAAAA,KAAA,OACEQ,IAAG,mCAAAC,OAAqCJ,EAAME,cAC9CG,IAAG,GAAAD,OAAKJ,EAAMM,KAAI,WAClBC,MAAM,SAGRZ,EAAAA,EAAAA,KAAA,OACEQ,IAAG,oDACHE,IAAG,GAAAD,OAAKJ,EAAMM,KAAI,cAGrBN,EAAMM,MACLX,EAAAA,EAAAA,KAACnB,EAAQ,CAAAqB,SAAEG,EAAMM,QAEjBX,EAAAA,EAAAA,KAACnB,EAAQ,CAAAqB,SAAC,kBAEXG,EAAMQ,WACLb,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEI,EAAAA,EAAAA,MAACzB,EAAQ,CAAAqB,SAAA,EACPF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,gBAAkB,IAAEG,EAAMQ,gBAIpCb,EAAAA,EAAAA,KAACnB,EAAQ,CAAAqB,SAAC,qCAzBLG,EAAMS,SA+BnBd,EAAAA,EAAAA,KAACnB,EAAQ,CAAAqB,SAAC,iCAIf,C,mFCnEP,MACMa,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAHiB,+BAIV,MAAMC,EAAoBxB,gBACbuB,EAAAA,EAAAA,IAAU,+BAADP,OAAgCM,KAChDG,KAGAC,EAAe1B,gBACRuB,EAAAA,EAAAA,IAAU,UAADP,OAAWK,EAAE,aAAAL,OAAYM,KACzCG,KAGAE,EAAe3B,gBACRuB,EAAAA,EAAAA,IAAU,UAADP,OAAWK,EAAE,qBAAAL,OAAoBM,KACjDG,KAGAG,EAAkB5B,gBACXuB,EAAAA,EAAAA,IAAU,UAADP,OAAWK,EAAE,qBAAAL,OAAoBM,KACjDG,KAGAI,EAAiB7B,gBACVuB,EAAAA,EAAAA,IAAU,yBAADP,OAA0BM,EAAO,WAAAN,OAAUE,KAC3DO,I","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin: 0.1rem 0;\n\n  > li {\n    /* display: flex; */\n    font-size: small;\n    /* background-color: rgba(0, 0, 0, 0.05); */\n    padding: 0.5rem;\n  }\n`;\n\nexport const CastText = styled.p`\n  margin: 0.3rem 0;\n  width: 100px;\n  > span {\n    display: block;\n    font-weight: 700;\n    margin-right: 0.2rem;\n  }\n`;\nexport const MovieAddInfo = styled.div`\n  padding: 1rem 0.2rem;\n  border-bottom: 0.2rem solid rgba(0, 0, 0, 0.3);\n  border-top: 0.2rem solid rgba(0, 0, 0, 0.3);\n  > ul > li {\n    margin: 0 0 0.5rem 1rem;\n  }\n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from '../../services/api';\nimport { CastList, CastText } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const findMovieCast = async () => {\n      try {\n        setIsLoading(true);\n        const res = await API.getMovieCast(movieId);\n        setCast(res.cast);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    findMovieCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading ? (\n        <p>Loading ...</p>\n      ) : (\n        <>\n          {cast.length ? (\n            <CastList>\n              {cast.map(actor => (\n                <li key={actor.id}>\n                  {actor.profile_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n                      alt={`${actor.name} poster`}\n                      width=\"100\"\n                    />\n                  ) : (\n                    <img\n                      src={`https://via.placeholder.com/100x150?text=No+Image`}\n                      alt={`${actor.name} profile`}\n                    />\n                  )}\n                  {actor.name ? (\n                    <CastText>{actor.name}</CastText>\n                  ) : (\n                    <CastText>No actor name</CastText>\n                  )}\n                  {actor.character ? (\n                    <>\n                      <CastText>\n                        <span>Character: </span> {actor.character}\n                      </CastText>\n                    </>\n                  ) : (\n                    <CastText>No information about character</CastText>\n                  )}\n                </li>\n              ))}\n            </CastList>\n          ) : (\n            <CastText>No information about cast</CastText>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Cast;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0b79c5bca8197408ee9617cf88710b12';\n\naxios.defaults.baseURL = BASE_URL;\nexport const getTrendingMovies = async () => {\n  const res = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const getMovieById = async id => {\n  const res = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const getMovieCast = async id => {\n  const res = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const getMovieReviews = async id => {\n  const res = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const getMovieByName = async name => {\n  const res = await axios.get(`/search/movie?api_key=${API_KEY}&query=${name}`);\n  return res.data;\n};\n    \n    \n// };\n\n// End-points\n//\n// '/' – компонент Home                          /trending/get-trending\n// '/movies' – компонент Movies                  /search/search-movies\n// '/movies/:movieId' – компонент MovieDetails   /movies/get-movie-details\n// /movies/:movieId/cast – компонент Cast        /movies/get-movie-credits\n// /movies/:movieId/reviews                      /movies/get-movie-reviews\n\n"],"names":["CastList","styled","_templateObject","_taggedTemplateLiteral","CastText","_templateObject2","_templateObject3","Cast","movieId","useParams","cast","setCast","useState","isLoading","setIsLoading","useEffect","async","res","API","error","console","log","findMovieCast","_jsx","_Fragment","children","length","map","actor","_jsxs","profile_path","src","concat","alt","name","width","character","id","API_KEY","axios","getTrendingMovies","data","getMovieById","getMovieCast","getMovieReviews","getMovieByName"],"sourceRoot":""}